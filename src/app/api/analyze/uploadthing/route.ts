import { NextRequest, NextResponse } from 'next/server'
import { UTApi } from 'uploadthing/server'

export const dynamic = 'force-dynamic'

const utapi = new UTApi({
  token: process.env.UPLOADTHING_TOKEN,
})

export async function GET(_request: NextRequest) {
  try {
    console.log('üîç Analyzing UploadThing storage...')

    // Check UploadThing configuration
    const uploadthingToken = process.env.UPLOADTHING_TOKEN
    if (!uploadthingToken) {
      throw new Error('UPLOADTHING_TOKEN not configured')
    }

    // Get list of files from UploadThing
    console.log('üì• Fetching files from UploadThing...')
    const fileResponse = await utapi.listFiles()
    const files = fileResponse.files
    
    console.log(`üìä Found ${files.length} files in UploadThing`)

    // Analyze file patterns
    const analysis = {
      totalFiles: files.length,
      hasMore: fileResponse.hasMore,
      files: files.map(file => ({
        key: file.key,
        name: file.name,
        url: `https://utfs.io/f/${file.key}`,
        size: file.size,
        uploadedAt: new Date(file.uploadedAt),
        status: file.status,
        id: file.id
      })),
      statistics: {
        totalSize: files.reduce((sum, file) => sum + file.size, 0),
        statusCounts: files.reduce((acc, file) => {
          acc[file.status] = (acc[file.status] || 0) + 1
          return acc
        }, {} as Record<string, number>),
        uploadDates: files.map(file => new Date(file.uploadedAt)).sort(),
        averageFileSize: files.length > 0 ? files.reduce((sum, file) => sum + file.size, 0) / files.length : 0
      },
      urlPatterns: {
        baseUrl: 'https://utfs.io/f/',
        exampleUrls: files.slice(0, 5).map(file => `https://utfs.io/f/${file.key}`),
        keyFormat: 'Generated by UploadThing based on file content and metadata'
      }
    }

    console.log('üìã UploadThing Analysis Complete:', {
      fileCount: analysis.totalFiles,
      totalSizeMB: Math.round(analysis.statistics.totalSize / (1024 * 1024) * 100) / 100,
      hasMore: analysis.hasMore,
      statusCounts: analysis.statistics.statusCounts
    })

    return NextResponse.json({
      success: true,
      message: `Found ${files.length} files in UploadThing storage`,
      analysis,
      timestamp: new Date().toISOString(),
      configuration: {
        hasToken: !!uploadthingToken,
        tokenPrefix: uploadthingToken ? uploadthingToken.substring(0, 8) + '...' : 'none'
      }
    })

  } catch (error) {
    console.error('‚ùå UploadThing analysis error:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'UploadThing analysis failed',
        message: error instanceof Error ? error.message : 'Unknown error',
        suggestion: 'Check UPLOADTHING_TOKEN configuration and API connectivity'
      },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json().catch(() => ({}))
    const { action } = body

    if (action === 'test-upload') {
      console.log('üß™ Testing UploadThing upload functionality...')
      
      // Create a small test file
      const testContent = `Test file created at ${new Date().toISOString()}`
      const testFile = new File([testContent], 'test-upload.txt', {
        type: 'text/plain'
      })

      const uploadResult = await utapi.uploadFiles(testFile)
      
      if (uploadResult.data) {
        console.log(`‚úÖ Test upload successful: ${uploadResult.data.url}`)
        
        // Clean up test file after verification
        setTimeout(async () => {
          try {
            await utapi.deleteFiles(uploadResult.data!.key)
            console.log('üóëÔ∏è Test file cleaned up')
          } catch (cleanupError) {
            console.log('‚ö†Ô∏è Test file cleanup failed:', cleanupError)
          }
        }, 5000)

        return NextResponse.json({
          success: true,
          message: 'UploadThing upload test successful',
          testResult: {
            url: uploadResult.data.url,
            key: uploadResult.data.key,
            name: uploadResult.data.name,
            size: uploadResult.data.size
          },
          note: 'Test file will be automatically deleted in 5 seconds'
        })
      } else {
        throw new Error('Upload test failed - no data returned')
      }
    }

    return NextResponse.json({
      message: 'UploadThing analysis endpoint',
      availableActions: [
        'GET: Analyze current UploadThing storage',
        'POST with { action: "test-upload" }: Test upload functionality'
      ]
    })

  } catch (error) {
    console.error('‚ùå UploadThing test error:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'UploadThing test failed',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}